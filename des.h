#ifndef _DES_H_
#define _DES_H_

#include <memory.h>
#include <stdio.h>
#include <iostream>
#include <cstring>
using namespace std;
enum {ENCRYPT,DECRYPT};
void Des_Run(char Out[8], char In[8], bool Type=ENCRYPT);
void Des_SetKey(const char Key[8]);
static void F_func(bool In[32], const bool Ki[48]);
static void S_func(bool Out[32], const bool In[48]);
static void Transform(bool *Out, bool *In, const char *Table, int len);
static void XOR(bool *InA, const bool *InB, int len);
static void LeftMove(bool *In, int len, int loop);
static void ByteToBit(bool *Out, const char *In, int bits);
static void BitToByte(char *Out, const bool *In, int bits);

const static char PC1_Table[56] = {
        57,49,41,33,25,17,9,1,58,50,42,34,26,18,
        10,2,59,51,43,35,27,19,11,3,60,52,44,36,
        63,55,47,39,31,23,15,7,62,54,46,38,30,22,
        14,6,61,53,45,37,29,21,13,5,28,20,12,4
};
//PC2选位表(子密钥生成置换表2) 生成子密钥 48位
const static char PC2_Table[48] = {
        14,17,11,24,1,5,3,28,15,6,21,10,
        23,19,12,4,26,8,16,7,27,20,13,2,
        41,52,31,37,47,55,30,40,51,45,33,48,
        44,49,39,56,34,53,46,42,50,36,29,32
};

//左移位数表 
const static char LOOP_Table[16] = {
    1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1
};

//置换IP表
const static char IP_Table[64] = {
        58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7
};
//逆置换IP-1表
const static char IPR_Table[64] = {
        40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,
        38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,
        36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,
        34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25
};
//E位选择表(扩展置换表)
static const char E_Table[48] = {
        32,1,2,3,4,5,4,5,6,7,8,9,
        8,9,10,11,12,13,12,13,14,15,16,17,
        16,17,18,19,20,21,20,21,22,23,24,25,
        24,25,26,27,28,29,28,29,30,31,32,1
};
//P换位表(单纯换位表)
const static char P_Table[32] = {
        16,7,20,21,
		29,12,28,17,
		1,15,23,26,
		5,18,31,10,
		2,8,24,14,
		32,27,3,9,
		19,13,30,6,
		22,11,4,25
};
int S[8][64] = {
	{
	0xe,0x0,0x4,0xf,0xd,0x7,0x1,0x4,0x2,0xe,0xf,0x2,0xb,
	0xd,0x8,0x1,0x3,0xa,0xa,0x6,0x6,0xc,0xc,0xb,0x5,0x9,
	0x9,0x5,0x0,0x3,0x7,0x8,0x4,0xf,0x1,0xc,0xe,0x8,0x8,
	0x2,0xd,0x4,0x6,0x9,0x2,0x1,0xb,0x7,0xf,0x5,0xc,0xb,
	0x9,0x3,0x7,0xe,0x3,0xa,0xa,0x0,0x5,0x6,0x0,0xd 
	},
	{ 
	0xf,0x3,0x1,0xd,0x8,0x4,0xe,0x7,0x6,0xf,0xb,0x2,0x3,
	0x8,0x4,0xf,0x9,0xc,0x7,0x0,0x2,0x1,0xd,0xa,0xc,0x6,
	0x0,0x9,0x5,0xb,0xa,0x5,0x0,0xd,0xe,0x8,0x7,0xa,0xb,
	0x1,0xa,0x3,0x4,0xf,0xd,0x4,0x1,0x2,0x5,0xb,0x8,0x6,
	0xc,0x7,0x6,0xc,0x9,0x0,0x3,0x5,0x2,0xe,0xf,0x9
	},
	{ 
	0xa,0xd,0x0,0x7,0x9,0x0,0xe,0x9,0x6,0x3,0x3,0x4,0xf,
	0x6,0x5,0xa,0x1,0x2,0xd,0x8,0xc,0x5,0x7,0xe,0xb,0xc,
	0x4,0xb,0x2,0xf,0x8,0x1,0xd,0x1,0x6,0xa,0x4,0xd,0x9,
	0x0,0x8,0x6,0xf,0x9,0x3,0x8,0x0,0x7,0xb,0x4,0x1,0xf,
	0x2,0xe,0xc,0x3,0x5,0xb,0xa,0x5,0xe,0x2,0x7,0xc 
	},
	{ 
	0x7,0xd,0xd,0x8,0xe,0xb,0x3,0x5,0x0,0x6,0x6,0xf,0x9,
	0x0,0xa,0x3,0x1,0x4,0x2,0x7,0x8,0x2,0x5,0xc,0xb,0x1,
	0xc,0xa,0x4,0xe,0xf,0x9,0xa,0x3,0x6,0xf,0x9,0x0,0x0,
	0x6,0xc,0xa,0xb,0xa,0x7,0xd,0xd,0x8,0xf,0x9,0x1,0x4,
	0x3,0x5,0xe,0xb,0x5,0xc,0x2,0x7,0x8,0x2,0x4,0xe 
	},
	{ 
	0x2,0xe,0xc,0xb,0x4,0x2,0x1,0xc,0x7,0x4,0xa,0x7,0xb,
	0xd,0x6,0x1,0x8,0x5,0x5,0x0,0x3,0xf,0xf,0xa,0xd,0x3,
	0x0,0x9,0xe,0x8,0x9,0x6,0x4,0xb,0x2,0x8,0x1,0xc,0xb,
	0x7,0xa,0x1,0xd,0xe,0x7,0x2,0x8,0xd,0xf,0x6,0x9,0xf,
	0xc,0x0,0x5,0x9,0x6,0xa,0x3,0x4,0x0,0x5,0xe,0x3
	},
	{ 
	0xc,0xa,0x1,0xf,0xa,0x4,0xf,0x2,0x9,0x7,0x2,0xc,0x6,
	0x9,0x8,0x5,0x0,0x6,0xd,0x1,0x3,0xd,0x4,0xe,0xe,0x0,
	0x7,0xb,0x5,0x3,0xb,0x8,0x9,0x4,0xe,0x3,0xf,0x2,0x5,
	0xc,0x2,0x9,0x8,0x5,0xc,0xf,0x3,0xa,0x7,0xb,0x0,0xe,
	0x4,0x1,0xa,0x7,0x1,0x6,0xd,0x0,0xb,0x8,0x6,0xd
	},
	{ 
	0x4,0xd,0xb,0x0,0x2,0xb,0xe,0x7,0xf,0x4,0x0,0x9,0x8,
	0x1,0xd,0xa,0x3,0xe,0xc,0x3,0x9,0x5,0x7,0xc,0x5,0x2,
	0xa,0xf,0x6,0x8,0x1,0x6,0x1,0x6,0x4,0xb,0xb,0xd,0xd,
	0x8,0xc,0x1,0x3,0x4,0x7,0xa,0xe,0x7,0xa,0x9,0xf,0x5,
	0x6,0x0,0x8,0xf,0x0,0xe,0x5,0x2,0x9,0x3,0x2,0xc
	},
	{ 
	0xd,0x1,0x2,0xf,0x8,0xd,0x4,0x8,0x6,0xa,0xf,0x3,0xb,
	0x7,0x1,0x4,0xa,0xc,0x9,0x5,0x3,0x6,0xe,0xb,0x5,0x0,
	0x0,0xe,0xc,0x9,0x7,0x2,0x7,0x2,0xb,0x1,0x4,0xe,0x1,
	0x7,0x9,0x4,0xc,0xa,0xe,0x8,0x2,0xd,0x0,0xf,0x6,0xc,
	0xa,0x9,0xd,0x0,0xf,0x3,0x3,0x5,0x5,0x6,0x8,0xb
	} 
};

static bool SubKey[16][48];//16圈子密钥
 
//设置密钥
void Des_SetKey(const char Key[8]){
    static bool K[64], *KL = &K[0], *KR = &K[28];
    ByteToBit(K, Key, 64);// 字节组转换成位组
    Transform(K, K, PC1_Table, 56);// 变换
    for(int i=0; i<16; i++){
        LeftMove(KL, 28, LOOP_Table[i]);// 循环左移
        LeftMove(KR, 28, LOOP_Table[i]);// 循环左移
        Transform(SubKey[i], K, PC2_Table, 48);// 变换
    }
    
}
 
 
 
void F_func(bool In[32], const bool Ki[48]){
    static bool MR[48];
    Transform(MR, In, E_Table, 48);// 选择扩展E：将右边32位扩展为48位
    XOR(MR, Ki, 48);///48位子密钥与48位选择扩展结果异或
    S_func(In, MR);//选择压缩S：48位结果分成8组6位，分别通过8个s盒，每个盒子输出4位，拼起来得到32位结果
    Transform(In, In, P_Table, 32);//置换运算P：32位结果按照表进行换位，得到32位结果replace_result
}
 
void S_func(bool Out[32], const bool In[48]){ 
    for(int i=0;i<8;++i){
        int R[6];
        for(int j=0;j<6;++j){
            R[j]=In[6*i+j];
        }
        //这6位二进制数对应的十进制数是num
        int num=0;
        for(int k=0;k<6;++k){
            num=num*2+R[k];
        }
        //到S里查表i里第num项，化为二进制，拼成out
        int res=S[i][num];
        int binary[4]={0,0,0,0};
        int j=3;
        while(res){
            binary[j--]=res%2;
            res/=2;
        }
        for(int j=0;j<4;++j){
            Out[4*i+j]=binary[j];
        }
	}
}
 
void Transform(bool *Out, bool *In, const char *Table, int len){
    static bool Tmp[256];
    for(int i = 0; i < len; i++){
        Tmp[i] = In[ Table[i] - 1 ];
    }
    memcpy(Out, Tmp, len);
}
 
 
 
void XOR(bool *InA, const bool *InB, int len){
    for(int i = 0; i < len; i++){
        InA[i] ^= InB[i];
    }
}

//循环左移
void LeftMove(bool *In, int len, int loop){
    static bool Tmp[256];
    memcpy(Tmp, In, loop);
    memcpy(In, In+loop, len-loop);
    memcpy(In+len-loop, Tmp, loop);
}

//字节组转换成位组
void ByteToBit(bool *Out, const char *In, int bits){
    for(int i = 0; i < bits; i++){
        Out[i] = (In[i/8] >> (i%8)) & 1;
    }
}
void BitToByte(char *Out, const bool *In, int bits){
    memset(Out, 0, (bits+7)/8);
    for(int i = 0; i < bits; i++){
        Out[i/8] |= In[i] << (i%8);
    }
}

void Des_Run(char Out[8], char In[8], bool Type){
    static bool M[64], Tmp[32], *Li = &M[0], *Ri = &M[32];
    ByteToBit(M, In, 64);// 字节组转换成位组
	//初始置换IP：将64位明文通过初始置换，得到64位结果
    Transform(M, M, IP_Table, 64);
    if( Type == ENCRYPT ){
        for(int i=0; i<16; i++) {
            memcpy(Tmp, Ri, 32);
            F_func(Ri, SubKey[i]);
            XOR(Ri, Li, 32);
            memcpy(Li, Tmp, 32);
        }
    }
	else{
        for(int i=15; i>=0; i--) {
            memcpy(Tmp, Li, 32);
            F_func(Li, SubKey[i]);
            XOR(Li, Ri, 32);
            memcpy(Ri, Tmp, 32);
        }
    }
    Transform(M, M, IPR_Table, 64);
	//64位二进制转为字节
    BitToByte(Out, M, 64);
}

//16进制串转为4位二进制数组 
void hex2bin(bool *Out, const char *In, int lenIn){
	char table[16][5]={"0000","0001","0010","0011","0100","0101","0110","0111",
	"1000","1001","1010","1011","1100","1101","1110","1111"};
	for(int i=0;i<lenIn;++i){
		int num=0;
		if(In[i]>='0'&&In[i]<='9'){
			num=In[i]-'0';
		}
		else{
			num=In[i]-'a'+10;
		}
		for(int j=0;j<4;++j){
			Out[4*i+j]=table[num][j]-'0';
		}
	}
}
//封装，使得密文为16进制，更好看 
//先将字符串转为二进制串，再转为十六进制 
void str2hex(char *hex, const char *In, int bits){
	bool Out[64]; 
	ByteToBit(Out,In,bits);
	
	char alpha[]="0123456789abcdef";
	for(int i=0;i<16;++i){
		int temp=0;
		for(int j=0;j<4;++j){
			temp=2*temp+Out[4*i+j];
		}
		hex[i]=alpha[temp];
	}
}

//输入十六进制密文
void hex2str(char *Out, char *hex, int bits){
	bool bin[64];
	hex2bin(bin,hex,16);
	BitToByte(Out,bin,bits);
} 

//DES总的加密入口，注意前面先要设置DES密钥
void DES_Encrypt(char *str, char *hex){//str：明文，hex：密文
    Des_Run(str, str, ENCRYPT);
    cout<<"加密结果为："; 
    str2hex(hex,str,64);
    int n=strlen(hex);
    for(int i=0;i<n;++i){
    	cout<<hex[i];
	}
	cout<<endl<<endl;
}

//DES总的解密入口，注意前面先要设置DES密钥
void DES_Decrypt(char *str, char *hex){//str：明文，hex：密文
    hex2str(str,hex,64);
    Des_Run(str, str, DECRYPT);
    cout<<"---解密结果为："; 
    int n=strlen(str);
    for(int i=0;i<n;++i){
    	cout<<str[i];
	}
    cout<<endl;
}

#endif //_DES_H_
